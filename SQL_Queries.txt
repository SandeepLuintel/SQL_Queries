

--Joining tables using inner-join

	select fts.favoritetvshow, rss.relationshipstatus, count(*) as freq
	from FavoriteTVShows fts
	join relationshipstatus as rss
	on fts.profileid = rss.profileid
	where RelationshipStatus="Single"
	group by 1
	order by freq desc;

	select concentration, favoritebook, count(favoritebook)as freq
	from concentration as cn, favoritebooks as fbs
	where cn.profileid=fbs.profileid and cn.concentration like '%Psychology%'
	group by fbs.profileid
	order by freq desc;


--Joing tables using inner-join and sub-query

	select ar.Name as Artist, tk.Name as Track
	from( Artist as ar
	Join Album as al
	on ar.ArtistId=al.ArtistId)
	Join Track as tk
	on tk.AlbumId=al.AlbumId;

	select FavoriteBook, count(*)
	from favoritebooks as fb join profiles as pf using (profileid)
	where pf.Status<>'Alumnus/Alumna' and pf.Status<>'Faculty' and 
	pf.Status<>'Staff' and pf.Status is not Null
	and profileid in 
	(select profileid
	from favoritebooks
	group by profileid
	having count(*)>=10)
	group by favoritebook
	order by count(*) desc
	limit 3


--Join tables using left join

	select count(*) as numNullProfiles, round(100*cast(count(*) as real) / (select count(*) from profiles), 2) as PercNoConcentration
	from profiles left join concentration using(ProfileID)
	where concentration.ProfileID is null;



--Join tables using Set operations

	select ProfileID
	from favoritebooks
	where FavoriteBook like '%Lord of the Rings%'
	intersect
	select ProfileID
	from concentration
	where concentration='Psychology';

	select ProfileID
	from favoritebooks
	where favoritebook is not null
	except 
	select ProfileID
	from favoritetvshows
	where favoritetvshow is not null;



--Queries with date and time

	select count(*)
	from profiles
	where strftime('%Y-%m-%d', LastUpdate)<='2005-06-30' and strftime('%Y-%m-%d', LastUpdate)>='2005-01-01';

	select avg(strftime('%J','now')-strftime('%J',MemberSince))as AvgTenure_NonFan
	from favoritemusic join profiles using (ProfileID)
	where favoritemusic not like '%Nickelback%';

	select sum(Volume) as Total_Trading_Volume, strftime('%Y',Date) as Year, strftime('%m',Date) as Month, Symbol
	from quotes
	where Symbol='MSFT' and strftime('%m',Date)='01'
	group by 2,3,4

	select Symbol, max(Close) as MaxClosePrice
	from quotes
	where Date between '2018-01-01' and '2018-02-11'
	group by Symbol


--Queries using Case statement

	select distinct profileid,
	case
	when "Political.Views"="Libertarian" then "L"
	when "Political.Views"="Conservative" then "C"
	else "The world is not binary"
	End as Name
	from profiles;

	select 
	case
	when strftime('%Y',MemberSince)='2004' then 'Early Adopter'
	else 'Late Adopter'
	End as MemberType,count(*) as Freq
	from profiles
	group by MemberType;

	select 
	case
	when birth_year <1960 then "Older"
	when birth_year>=1960 and birth_year<=1989 then "Middle"
	when birth_year >=1990 then "Younger"
	end as AgeGroup
	from citibikerides
	where AgeGroup is not null
	group by AgeGroup;

	select usertype,
	case
	when strftime('%w',starttime)='6' or strftime('%w',starttime)='0' then "Weekend"
	else "Weekday"
	end as RideType, count(*)
	from citibikerides
	where usertype='Customer'
	group by 1,2;


--Using temporary tables for calculations
	
	create temporary table T1 as
	select FavoriteBook, count(*) as totcount
	from favoritebooks
	group by FavoriteBook
	order by totcount desc;

	create temporary table T2 as
	select cn.concentration, fb.FavoriteBook, count(*) as freq
	from favoritebooks as fb join concentration as cn using (ProfileID)
	where cn.Concentration="Finance" or cn.Concentration="Psychology"
	group by cn.concentration,fb.FavoriteBook
	order by freq desc;

	select T1.FavoriteBook,T1.totcount,T2.concentration, T2.freq
	from T1,T2
	where T1.FavoriteBook=T2.FavoriteBook
	order by totcount desc;


	create temporary table T1 as
	select cb.*, si.station_name as start_station_name
	from citibikerides as cb join station_info as si
	where cb.start_station_id = si.station_id;

	create temporary table T2 as
	select T1.*, si.station_name as end_station_name
	from T1 join station_info as si
	where T1.end_station_id = si.station_id;
	
	select *
	from T2
	where start_station_name = 'Pershing Square North' 
	and end_station_name = 'W 33 St & 7 Ave'


--Using CTE to perform calculation
	
	With table1 as 
		(select continent, avg(population) as AvgContPop, 
		avg (distinct total_cases) as AvgTotalCases,
		avg (distinct total_deaths) as AvgTotalDeaths,
		avg (distinct total_tests) as AvgTotalTests
		from coviddeaths
		where continent in ('Asia', 'Europe', 'North America', 'South America', 'Africa', 'Oceania')
		group by continent)
	select continent,concat(round((AvgTotalCases/AvgContPop)*100,4),'%') as Avg_Total_Case_in_Pop,
		concat(round((AvgTotalDeaths/AvgContPop)*100,4),'%') as Avg_Total_Death_in_Pop,
		concat(round((AvgTotalTests/AvgContPop)*100,4),'%') as Avg_Total_Test_in_Pop,
		concat(round((AvgTotalDeaths/AvgTotalCases)*100,4),'%') as Avg_Total_Death_in_Cases
	from table1


--Creating Views
	
	Create view cust_view As
	select CustomerId, substr(FirstName,1,1) || "." || substr(LastName, 1,1) as Initials
	From Customer;

	Create view Empl_HireDate As	
	select strftime("%Y-%m", HireDate)as YearMonth, count(*)
	from Employee
	group by YearMonth;

	Create view Percent_of_RelationshipStatus As
	select RelationshipStatus, round(100*Cast(count(*) as Real)/ (select count(*) from relationshipstatus),2) || "%" as Percentage 
	from relationshipstatus
	group by 1;


--Sub string

	select Birthday, cast(substr(Birthday, instr(Birthday,".")-2, length(Birthday))as int) as Birthday_v2
	from profiles;

	select profileid
	from profiles
	where substr(Birthday, instr(Birthday, ".")-4, length(Birthday)) like '1986%';

--Creating a new table

	create table hello (ID interger, Name string);


--Inserting data into the new table

	insert into hello values (100, 'Adams');
	insert into hello values (2, 'Samuel');
	insert into hello values(3, 'David');
	insert into hello (ID) values (4);
	insert into hello values (5, 'Sam');
	insert into hello values (6,'Max');

--Updating table

	update hello
	set Name = 'Arisha'
	where ID = 4;

--Deleting data from the table

	delete from hello
	where ID = 4;
